package com.broadtech.vulnerability.task;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * @author jiangqingsong
 * @description 下载CNVD漏洞数据
 * @date 2020-09-19 15:04
 */
public class DownloadVulnerability {
    public static void main(String[] args) throws Exception {
        String srcUrl = "";
        String savePath = "";
        String baseUrl = "https://www.cnvd.org.cn/shareData/download/";
        String baseDestPath = "D:\\SDC\\data\\漏洞数据\\CNVD离线xml数据\\";
        int newestIndex = 685;
        //int pioneerIndex = 362;
        int pioneerIndex = 682;
        for (int index = pioneerIndex; index <= newestIndex; index++) {
            srcUrl = baseUrl + index + "?email=565175219%40qq.com&passwordHidden=H4qgl2VpFlDPcbIxChQ3UQ%3D%3D&myCode=lrck";
            savePath = baseDestPath + index;
            saveUrlAs(srcUrl, savePath);
        }
    }

    public static File saveUrlAs(String url, String filePath) {
        //System.out.println("fileName---->"+filePath);
        //创建不同的文件夹目录
        File file = new File(filePath);
        //判断文件夹是否存在
        if (!file.exists()) {
            //如果文件夹不存在，则创建新的的文件夹
            file.mkdirs();
        }
        FileOutputStream fileOut = null;
        HttpURLConnection conn = null;
        InputStream inputStream = null;
        try {
            // 建立链接
            URL httpUrl = new URL(url);
            conn = (HttpURLConnection) httpUrl.openConnection();
            conn.setRequestProperty("User-Agent", "Mozilla/31.0 (compatible; MSIE 10.0; Windows NT; DigExt)");
            //conn.setRequestProperty("Cookie", "__jsluid_s=de9385ed29029e8e34c4716e6b04653d; JSESSIONID=81CD5FEBFE56A0FB2D43F842CCC31FC8; puk=16c28f07bc118e30bcd0c6d09ec803a9dff88ca3c34437faa9680ff7fada6e2002bbb59f7b98ded91358a04a660e18e5f2e7333ef3ced50ea652a9727706800b34435bafd0fa80f604c39dd7c14df1280e161a62085bc2808104900f88d54f8e141842c40882de56c6e506dc177b6571"); //防止报403错误。

            conn.setDoInput(true);
            conn.setDoOutput(true);
            // post方式不能使用缓存
            conn.setUseCaches(false);
            //连接指定的资源
            conn.connect();
            //获取网络输入流
            inputStream = conn.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(inputStream);
            //判断文件的保存路径后面是否以/结尾
            if (!filePath.endsWith("/")) {

                filePath += "/";

            }
            //写入到文件（注意文件保存路径的后面一定要加上文件的名称）
            fileOut = new FileOutputStream(filePath);
            BufferedOutputStream bos = new BufferedOutputStream(fileOut);

            byte[] buf = new byte[4096];
            int length = bis.read(buf);
            //保存文件
            while (length != -1) {
                bos.write(buf, 0, length);
                length = bis.read(buf);
            }
            bos.close();
            bis.close();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("抛出异常！！");
        }

        return file;

    }
}
