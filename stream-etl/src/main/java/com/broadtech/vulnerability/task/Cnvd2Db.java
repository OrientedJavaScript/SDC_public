package com.broadtech.vulnerability.task;

import com.broadtech.vulnerability.bean.CnvdVulnerability;
import com.broadtech.vulnerability.bean.Cve;
import com.broadtech.vulnerability.units.TimeUtils;
import org.apache.commons.dbcp.BasicDataSource;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.List;

import static com.broadtech.vulnerability.units.XmlUtils.getXmlData;

/**
 * @author jiangqingsong
 * @description 解析cnvd漏洞数据入库
 * 1、源文件：xml
 * 2、输出：sdc.brd_cnvd_vulnerability
 * @date 2020-09-14 10:51
 */
public class Cnvd2Db {
    private PreparedStatement ps;
    private BasicDataSource dataSource = new BasicDataSource();
    ;
    private Connection connection;
    private String jdbcUrl = "jdbc:mysql://master01:3306/sdc?characterEncoding=UTF-8&serverTimezone=UTC";
    private String userName = "root";
    private String password = "broadtech";

    private String sql = "insert into brd_cnvd_vulnerability(number,title,serverity,product,is_event,submit_time,open_time,reference_link,formalway,description,patchname,patch_description,update_time, cve_number, cve_url)" +
            "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

    public Cnvd2Db() {
    }


    private void exeParse(List<String> files) throws Exception {
        connection = getCon(dataSource);
        ps = this.connection.prepareStatement(sql);
        for (String file : files) {
            System.out.println(file);
            parseXml(file);
        }
    }

    public void parseXml(String filePath) throws Exception {
        String updateTime = TimeUtils.convertTimestamp2Date(System.currentTimeMillis(), "yyyy-MM-dd hh:mm:ss");
        SAXReader reader = new SAXReader();
        Document document = reader.read(new File(filePath));
        Element root = document.getRootElement();
        List vulnEles = root.elements();
        for (Object vuln : vulnEles) {
            Element vulnEle = (Element) vuln;
            String number = getXmlData(vulnEle, "number");
            String title = getXmlData(vulnEle, "title");
            String serverity = getXmlData(vulnEle, "serverity");
            String isEvent = getXmlData(vulnEle, "isEvent");
            String submitTime = getXmlData(vulnEle, "submitTime");
            String openTime = getXmlData(vulnEle, "openTime");
            String referenceLink = getXmlData(vulnEle, "referenceLink");
            String formalWay = getXmlData(vulnEle, "formalWay");
            String description = getXmlData(vulnEle, "description");
            String patchName = getXmlData(vulnEle, "patchName");
            String patchDescription = getXmlData(vulnEle, "patchDescription");
            List<Cve> cves = new ArrayList<>();

            try {
                List cveObjs = vulnEle.element("cves").elements();
                for (Object cveObj : cveObjs) {
                    Element cveEle = (Element) cveObj;
                    String cveNumber = cveEle.element("cveNumber").getTextTrim();
                    String cveUrl = cveEle.element("cveUrl").getTextTrim();
                    cves.add(new Cve(cveNumber, cveUrl));
                }
            } catch (Exception e1) {
            }
            List products;
            try {
                products = vulnEle.element("products").elements();
            } catch (Exception e) {
                products = new ArrayList();
            }
            for (Object productObj : products) {
                Element productEle = (Element) productObj;
                String product = productEle.getTextTrim();
                //insert into db
                CnvdVulnerability cnvdVulnerability = new CnvdVulnerability(number, title, serverity, product, isEvent,
                        submitTime, openTime, referenceLink, formalWay, description, patchName, patchDescription, updateTime);
                for (Cve cve : cves) {
                    saveDb(updateTime, cnvdVulnerability, cve);
                }
            }
        }
    }

    public void saveDb(String updateTime, CnvdVulnerability vuln, Cve cve) throws Exception {
        ps.setString(1, vuln.getNumber());
        ps.setString(2, vuln.getTitle());
        ps.setString(3, vuln.getServerity());
        ps.setString(4, vuln.getProduct());
        ps.setString(5, vuln.getIsevent());
        ps.setString(6, vuln.getSubmittime());
        ps.setString(7, vuln.getOpentime());
        ps.setString(8, vuln.getReferenceLink());
        ps.setString(9, vuln.getFormalway());
        ps.setString(10, vuln.getDescription());
        ps.setString(11, vuln.getPatchname());
        ps.setString(12, vuln.getPatchdescription());
        ps.setString(13, updateTime);
        ps.setString(14, cve.getCveNumber());
        ps.setString(15, cve.getCveUrl());
        ps.execute();
    }

    /**
     * 获取连接
     *
     * @param dataSource
     * @return
     * @throws Exception
     */
    public Connection getCon(BasicDataSource dataSource) throws Exception {
        dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
        dataSource.setUrl(jdbcUrl);
        dataSource.setUsername(userName);
        dataSource.setPassword(password);
        //设置连接池的一些参数
        dataSource.setInitialSize(5);
        dataSource.setMinIdle(2);

        Connection con = null;
        try {
            con = dataSource.getConnection();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return con;

    }

    /**
     * 获取路径下的所有文件/文件夹
     *
     * @param directoryPath  需要遍历的文件夹路径
     * @param isAddDirectory 是否将子文件夹的路径也添加到list集合中
     * @return
     */
    public static List<String> getAllFile(String directoryPath, boolean isAddDirectory) {
        List<String> list = new ArrayList();
        File baseFile = new File(directoryPath);
        if (baseFile.isFile() || !baseFile.exists()) {
            return list;
        }
        File[] files = baseFile.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                if (isAddDirectory) {
                    list.add(file.getAbsolutePath());
                }
                list.addAll(getAllFile(file.getAbsolutePath(), isAddDirectory));
            } else {
                list.add(file.getAbsolutePath());
            }
        }
        return list;
    }

    public static void main(String[] args) throws Exception {
        String dirPath = "D:\\SDC\\data\\漏洞数据\\cnvd_xml";
        List<String> files = getAllFile(dirPath, false);
        Cnvd2Db cnvd2Db = new Cnvd2Db();
        cnvd2Db.exeParse(files);
    }
}
