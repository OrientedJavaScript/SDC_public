package com.broadtech.vulnerability.task;

import com.broadtech.vulnerability.bean.LmVulnerability;
import com.broadtech.vulnerability.units.TimeUtils;
import org.apache.commons.dbcp.BasicDataSource;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.List;

/**
 * @author jiangqingsong
 * @description 解析绿盟漏洞数据入库
 * 1、源文件：xml
 * 2、输出：sdc.brd_lm_vulnerability
 *
 * @date 2020-09-14 10:51
 */
public class Lm2Db {
    private PreparedStatement ps;
    private PreparedStatement ps1;
    private BasicDataSource dataSource;
    private Connection connection;
    private String jdbcUrl;
    private String userName;
    private String password;

    public Lm2Db(String jdbcUrl, String userName, String password) {
        this.jdbcUrl = jdbcUrl;
        this.userName = userName;
        this.password = password;
    }

    private static ArrayList<LmVulnerability> getParserAuthor() throws Exception {
        SAXReader reader = new SAXReader();
        Document document = reader.read(new File("D:\\SDC\\data\\漏洞数据\\绿盟\\4.xml"));
        Element root = document.getRootElement();
        Element targets = (Element)root.selectSingleNode("//aurora/data/report/targets/target");
        Element ipEle = (Element)targets.elements().get(0);
        String ip = ipEle.getTextTrim();
        Element vulnScannedEle = (Element)targets.elements().get(2);//vuln_detail
        List vulnDetails = vulnScannedEle.elements();
        for(Object e: vulnDetails){
            Element vuln = (Element) e;
            List vulnInfo = vuln.elements();
            String vulnId = ((Element)vulnInfo.get(0)).getTextTrim();
            String pluginId = ((Element)vulnInfo.get(1)).getTextTrim();
            String name = ((Element)vulnInfo.get(2)).getTextTrim();
            String threatCategory = ((Element)vulnInfo.get(3)).getTextTrim();
            String cveId = ((Element)vulnInfo.get(4)).getTextTrim();
            String nsfocusId = ((Element)vulnInfo.get(5)).getTextTrim();
            String bugtraqId = ((Element)vulnInfo.get(6)).getTextTrim();
            String cnnvd = ((Element)vulnInfo.get(7)).getTextTrim();
            String riskPoints = ((Element)vulnInfo.get(8)).getTextTrim();
            String solution = ((Element)vulnInfo.get(9)).getTextTrim();
            String description = ((Element)vulnInfo.get(10)).getTextTrim();
            //todo  insert db
            LmVulnerability vulnerability = new LmVulnerability(vulnId, pluginId, name, threatCategory, cveId, nsfocusId,
                    bugtraqId, cnnvd, riskPoints, solution, description);
            Lm2Db xmlUtil = new Lm2Db("jdbc:mysql://master01:3306/sdc?characterEncoding=UTF-8&serverTimezone=UTC", "root", "broadtech");
            xmlUtil.saveDb(ip, vulnerability);
        }


        return null;
    }


    public void saveDb(String ip, LmVulnerability vuln) throws Exception {
        dataSource = new BasicDataSource();
        connection = getCon(dataSource);
        String sql = "insert into brd_lm_vulnerability(ip,vul_id,plugin_id,name,threat_category,cve_id,nsfocus_id,bugtraq_id,cnnvd,risk_points,solution,description)" +
                "values(?,?,?,?,?,?,?,?,?,?,?,?)";
        String sql1 = "insert into brd_vulnerability_unify(ip,cnvd_number, lm_number, source, insert_time)" +
                "values(?,?,?,?,?)";
        ps = this.connection.prepareStatement(sql);
        ps1 = this.connection.prepareStatement(sql1);
        ps.setString(1, ip);
        ps.setString(2, vuln.getVulnId());
        ps.setString(3, vuln.getPluginId());
        ps.setString(4, vuln.getName());
        ps.setString(5, vuln.getThreatCategory());
        ps.setString(6, vuln.getCveId());
        ps.setString(7, vuln.getNsfocusId());
        ps.setString(8, vuln.getBugtraqId());
        ps.setString(9, vuln.getCnnvd());
        ps.setString(10, vuln.getRiskPoints());
        ps.setString(11, vuln.getSolution());
        ps.setString(12, vuln.getDescription());

        ps1.setString(1, ip);
        ps1.setString(2, "");
        ps1.setString(3, vuln.getVulnId());
        ps1.setInt(4, 2);
        ps1.setString(5, TimeUtils.convertTimestamp2Date(System.currentTimeMillis(), "yyyy-MM-dd hh:mm:ss"));
        boolean execute = ps.execute();
        if(!vuln.getVulnId().isEmpty()){
            boolean execute2 = ps1.execute();
        }

    }
    public Connection getCon(BasicDataSource dataSource) throws Exception {
        dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
        dataSource.setUrl(jdbcUrl);
        dataSource.setUsername(userName);
        dataSource.setPassword(password);
        //设置连接池的一些参数
        dataSource.setInitialSize(5);
        dataSource.setMinIdle(2);

        Connection con = null;
        try {
            con = dataSource.getConnection();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return con;

    }
    public static void main(String[] args) throws Exception {
        getParserAuthor();
    }
}
